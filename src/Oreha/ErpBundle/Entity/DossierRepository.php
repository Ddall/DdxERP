<?php

namespace Oreha\ErpBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * DossierRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DossierRepository extends EntityRepository{

    /**
     * 
     * @param \Oreha\UserBundle\Entity\User $user
     */
    public function findByResponsable($user){
        return 
                ;
        
    }
    
    /**
     * Retourne les dossiers avec le statut GAGNE
     * @return ArrayCollection
     */
    public function findClients(){
        $q = $this->createQueryBuilder('d');
        $q->select('d')
            ->innerJoin('d.statuts', 's', 'WITH', 's.libelle = \'gagne\'')
        ;
        
        return $q->getQuery()->execute();
    }

    /**
     * Retourne la liste des dossiers (avec statut prospect)
     * @return ArrayCollection
     */
    public function findDossiers(){
        $q = $this->createQueryBuilder('d');
        $q->select('d')
            ->innerJoin('d.statuts', 's', 'WITH', 's.dossier = d')
            ->where('d.client_id IS NULL')
            ->andWhere('s.libelle != \'perdu\'')
//            ->having('s.libelle!=\'perdu\'')
        ;
        
        return $q->getQuery()->execute();
    }
    

    public function findDossiersEnAttenteValidation(){
        $qb =$this->createQueryBuilder('d');
        $qb
                ->select('d')
                ->innerJoin('d.statuts', 's', 'WITH', 's.dossier = d')
                ->where('s.transfered is null and d.client_id is null')
                ;
        
        return $qb->getQuery()->execute();
    }
    
    public function findTest(){
        $q = $this->createQueryBuilder('d');
        $q->select('d')
            ->innerJoin('Oreha\ErpBundle\Entity\Statut', 's', 'WITH', 's.dossier = d')
            ->where('d.client_id IS NULL')
//            ->andWhere('s.libelle != \'perdu\'')
            ->groupBy('d')
            ->having('s.libelle!=\'perdu\'')
        ;
        
        return $q->getQuery()->execute();
    }
    
    // ----- STATISTIQUES
    /**
     * Retourne le nombre de dossiers ouverts par mois.
     * @return ArrayList
     */
    public function findNombreProspectsParMois(){
        $q = $this->createQueryBuilder('d');
        $q
                ->select('COUNT(d) as totalMois, SUBSTRING(d.dateCreation, 6,2) as month, SUBSTRING(d.dateCreation, 1, 4) as year')
                ->orderBy('year, month')
                ->groupBy('month, year')
                
                
        ;
        return $q->getQuery()->execute();
                
    }
    
    
    /**
     * Retourne le nombre d'affaires gagnÃ©es == nombre de clients ouverts par mois
     * @return ArrayList
     */
    public function findNombreAffairesChiffreesGagnees(){
        $q = $this->createQueryBuilder('d');
        $q
                ->select('COUNT(c), SUBSTRING(c.dateCreation, 6,2) as month, SUBSTRING(c.dateCreation, 1, 4) as year')
                ->from('OrehaErpBundle:Client', 'c')
                ->orderBy('year, month')
                ->groupBy('month, year')
                ;
        
        return $q->getQuery()->execute(); 
    }
    
    
    /**
     * Retourne le nombre de dossiers avec un statut perdu par mois
     * @return ArrayList
     */
    public function findAffairesChiffreesPerdues(){
        $q = $this->createQueryBuilder('d');
        $q
                ->select('COUNT(d) as totalMois, SUBSTRING(d.dateCreation, 6,2) as month, SUBSTRING(d.dateCreation, 1, 4) as year')
                ->innerJoin('OrehaErpBundle:Statut', 's',  'WITH', 's.dossier = d')
                ->orderBy('year, month')
                ->groupBy('month, year')
                ->where('s.chr = \'P\' ')
                ;
        
        return $q->getQuery()->execute();
    }
    
    
    //--- nombr
    public function findNbDossiersParSource($id){
        $q = $this->createQueryBuilder('d');
        
        $q
                ->select('COUNT(d) as nombreProspects')
                ->innerJoin('OrehaErpBundle:Source', 'so', 'WITH','d.source = so' )
                ->where('so.id = :id')
                ->groupBy('so')
                ->setParameter(':id', $id)
        ;
        $arr = $q->getQuery()->execute();
        return @$arr[0]['nombreProspects'];
    }
    
    
    public function findNbDossiersSansSuiteParSource($id){
        $q = $this->createQueryBuilder('d');
        
        $q
                ->select('COUNT(d) as nombreSansSuite')
                ->innerJoin('OrehaErpBundle:Source', 'so', 'WITH','d.source = so' )
                ->innerJoin('Oreha\ErpBundle\Entity\Statut', 'st', 'WITH', 'st.dossier = d')
                ->where('so.id = :id')
                ->andWhere('st.libelle = \'sanssuite\' ')
                ->groupBy('so')
                ->setParameter(':id', $id)
        ;
        $arr = $q->getQuery()->execute();
        return @$arr[0]['nombreSansSuite'];
    }
    
    
    public function findNbDossiersPerdusParSource($id){
        $q = $this->createQueryBuilder('d');
        
        $q
                ->select('COUNT(d) as nombrePerdus')
                ->innerJoin('OrehaErpBundle:Source', 'so', 'WITH','d.source = so' )
                ->innerJoin('Oreha\ErpBundle\Entity\Statut', 'st', 'WITH', 'st.dossier = d')
                ->where('so.id = :id')
                ->andWhere('st.libelle = \'perdu\' ')
                ->groupBy('so')
                ->setParameter(':id', $id)
        ;
        $arr = $q->getQuery()->execute();
        return @$arr[0]['nombrePerdus'];
    }
    

    
}
